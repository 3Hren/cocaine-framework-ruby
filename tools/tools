#!/usr/bin/env ruby

require 'thor'
require 'json'

require 'rainbow/ext/string'

require_relative '../lib/cocaine'

def stage(prompt)
  puts "[  --  ] #{prompt} ..."
  result, magic = yield
  puts "\e[A\r[#{'  OK  '.color :green}] #{prompt}#{result ? '    ' : ": #{magic.to_s.color :green}"}"
  return result
rescue Exception => err
  puts "\e[A\r[#{' FAIL '.color :red}] #{prompt}: #{err.to_s.color :red}"
  raise err
end

module CocaineTools
  module App
    def self.upload(path, name=nil)
      manifest = stage "Locating and reading manifest from '#{path}'" do
        MessagePack.pack JSON.parse File.read File.join path, 'manifest.json'
      end

      name ||= File.basename File.absolute_path path

      tmpdir = Dir.mktmpdir 'cocaine-app-archive'
      tmpfile = File.join(tmpdir, "#{name}.tar.gz")
      archive = stage "Creating archive from '#{path}'" do
        begin
          `tar -czf #{tmpfile} -C #{path} .`
          MessagePack.pack File.read tmpfile
        ensure
          FileUtils.remove_entry_secure tmpdir
        end
      end

      storage = stage 'Connecting to the Cocaine' do
        Cocaine::Service.new :storage
      end

      stage 'Uploading manifest' do
        storage.write :manifests, name, manifest, [:app]
      end

      stage "Uploading '#{name}' application" do
        storage.write :apps, name, archive, [:app]
      end
    end

    # noinspection RubyResolve
    def self.restart(app, profile)
      node = Stage::stage 'Connecting to the Cocaine' do
        Cocaine::Service.new :node
      end

      stage "Stopping application '#{app}'" do
        _, rx = node.pause_app [app]
        [nil, rx.receive]
      end

      stage "Starting application '#{app}' with profile '#{profile}'" do
        _, rx = node.start_app({ app => profile })
        [nil, rx.receive]
      end
    end
  end
end

class App < Thor
  desc 'list', 'apps list'
  def list
    storage = stage 'Connecting to the Cocaine' do
      Cocaine::Service.new :storage
    end

    stage 'Fetching app list' do
      _, rx = storage.find :manifests, [:app]
      [nil, rx.receive]
    end
  end

  desc 'upload PATH', 'upload application from PATH'
  option :name
  def upload(path=Dir.pwd)
    CocaineTools::App::upload path, options[:name]
  rescue Exception => err
    puts err
    exit(1)
  end

  desc 'restart APP PROFILE', 'restart APP with PROFILE'
  def restart(app, profile)
    CocaineTools::App::restart app, profile
  end
end

class CocaineToolsCLI < Thor
  desc 'app SUBCOMMAND', 'Application specific tools'
  subcommand :app, App
end

# Suppress internal loggers.
Celluloid.logger = nil
Cocaine::LOG.level = Logger::ERROR

CocaineToolsCLI.start(ARGV)